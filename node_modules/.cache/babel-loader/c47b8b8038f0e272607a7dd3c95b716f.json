{"ast":null,"code":"var _jsxFileName = \"/Users/sainyagoyal/Desktop/react-carousel/src/Components/Carousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Children } from \"react\";\nimport './caraousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Carousel(props) {\n  _s();\n\n  const [activeItem, setactiveItem] = useState(0);\n\n  const updateActiveItem = count => {\n    let newItemIndex = activeItem;\n    newItemIndex = newItemIndex + count;\n    const totalChildren = Children.count(props.children);\n\n    if (newItemIndex < 0) {\n      newItemIndex = 0;\n    } else if (newItemIndex >= totalChildren) {\n      newItemIndex = totalChildren - 1;\n    }\n\n    setactiveItem(newItemIndex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        updateActiveItem(1);\n      },\n      children: \"prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Children.map(props.children, (child, index) => {\n        if (index === activeItem) {\n          return /*#__PURE__*/React.cloneElement(child);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        updateActiveItem(-1);\n      },\n      children: \"next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Carousel, \"Eqt6nbZ3ZP7wZLflInthgw51HWM=\");\n\n_c = Carousel;\nexport default Carousel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"sources":["/Users/sainyagoyal/Desktop/react-carousel/src/Components/Carousel.js"],"names":["React","useState","Children","Carousel","props","activeItem","setactiveItem","updateActiveItem","count","newItemIndex","totalChildren","children","map","child","index","cloneElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,iBAAP;;;AAKA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BL,QAAQ,CAAC,CAAD,CAAzC;;AAEA,QAAMM,gBAAgB,GAAGC,KAAD,IAAS;AAC7B,QAAIC,YAAY,GAACJ,UAAjB;AACAI,IAAAA,YAAY,GAACA,YAAY,GAACD,KAA1B;AACA,UAAME,aAAa,GAACR,QAAQ,CAACM,KAAT,CAAeJ,KAAK,CAACO,QAArB,CAApB;;AACA,QAAGF,YAAY,GAAC,CAAhB,EAAkB;AACdA,MAAAA,YAAY,GAAC,CAAb;AACH,KAFD,MAGK,IAAGA,YAAY,IAAGC,aAAlB,EAAgC;AACjCD,MAAAA,YAAY,GAAEC,aAAa,GAAC,CAA5B;AACH;;AACDJ,IAAAA,aAAa,CAACG,YAAD,CAAb;AACH,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAE,MAAI;AACjBF,QAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,gBACFL,QAAQ,CAACU,GAAT,CAAaR,KAAK,CAACO,QAAnB,EAA4B,CAACE,KAAD,EAAOC,KAAP,KAAe;AACxC,YAAGA,KAAK,KAAGT,UAAX,EAAsB;AACtB,8BAAOL,KAAK,CAACe,YAAN,CAAmBF,KAAnB,CAAP;AACC;AACJ,OAJA;AADE;AAAA;AAAA;AAAA;AAAA,YAJJ,eAWC;AAAQ,MAAA,OAAO,EAAE,MAAI;AACjBN,QAAAA,gBAAgB,CAAC,CAAC,CAAF,CAAhB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAlCMJ,Q;;KAAAA,Q;AAmCP,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Children } from \"react\";\nimport './caraousel.css'\n\n\n\n\nfunction Carousel(props){\n    const [activeItem,setactiveItem]=useState(0);\n\n    const updateActiveItem =(count)=>{\n        let newItemIndex=activeItem;\n        newItemIndex=newItemIndex+count;\n        const totalChildren=Children.count(props.children);\n        if(newItemIndex<0){\n            newItemIndex=0;\n        }\n        else if(newItemIndex>= totalChildren){\n            newItemIndex= totalChildren-1;\n        }\n        setactiveItem(newItemIndex);\n    }\n\n    return(\n      <div className=\"carousel\">\n          <button onClick={()=>{\n              updateActiveItem(1)\n          }}>prev</button>\n          <div>\n       {Children.map(props.children,(child,index)=>{\n           if(index===activeItem){\n           return React.cloneElement(child)\n           }\n       })}\n       </div>\n       <button onClick={()=>{\n           updateActiveItem(-1)\n       }}\n       >next</button>\n      </div>\n    )\n  }\n  export default Carousel;"]},"metadata":{},"sourceType":"module"}